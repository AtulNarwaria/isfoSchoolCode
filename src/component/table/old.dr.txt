import Box from "@mui/material/Box";
import { DataGrid, GridToolbar } from "@mui/x-data-grid";
import { useDemoData } from "@mui/x-data-grid-generator";
import { useEffect, useMemo, useState } from "react";
import {
    deleteCountry,
    getActiveCountry,
    updateCountryStatus,
} from "../../service/admin/location/country.service";
import { FaEye, FaEyeSlash, FaTrash } from "react-icons/fa";
import { toast } from "react-toastify";
import { setDate } from "date-fns";

export default function DataGrids(props: {
    name: String;
    data: any;
    refresh?: boolean;
    setRefresh?: boolean;
}) {
    let columns: any = [];
    if (props.name == "AdminActiveCountry") {
        columns = [
            { field: "id", headerName: "ID", width: 100 },
            { field: "name", headerName: "Name", width: 300 },
            {
                field: "actions",
                headerName: "Actions",
                width: 200,
                renderCell: (params: any) => {
                    const handlepUpdateStatus = async () => {
                        const { message, status } = await updateCountryStatus(
                            params.row.uuid,
                            !params.row.status
                        );
                        if (status == "error") {
                            toast.error(message, {
                                position: "top-right",
                                autoClose: 5000,
                                hideProgressBar: false,
                                closeOnClick: true,
                                pauseOnHover: true,
                                draggable: true,
                                progress: undefined,
                                theme: "dark",
                            });
                        } else {
                            toast.success(message, {
                                position: "top-right",
                                autoClose: 5000,
                                hideProgressBar: false,
                                closeOnClick: true,
                                pauseOnHover: true,
                                draggable: true,
                                progress: undefined,
                                theme: "dark",
                            });
                        }
                    };
                    const handlepDelete = async () => {
                        const { message, status } = await deleteCountry(params.row.uuid);
                        if (status == "error") {
                            toast.error(message, {
                                position: "top-right",
                                autoClose: 5000,
                                hideProgressBar: false,
                                closeOnClick: true,
                                pauseOnHover: true,
                                draggable: true,
                                progress: undefined,
                                theme: "dark",
                            });
                        } else {
                            toast.success(message, {
                                position: "top-right",
                                autoClose: 5000,
                                hideProgressBar: false,
                                closeOnClick: true,
                                pauseOnHover: true,
                                draggable: true,
                                progress: undefined,
                                theme: "dark",
                            });
                        }
                    };

                    return (
                        <div className= "flex gap-4 flex-row" >
                        {
                            params.row.status == true ? (
                                <>
                                { params.row.status }
                                < FaEye
                    onClick={ handlepUpdateStatus }
                    className=" text-blue-700 hover:cursor-pointer text-lg"
                            />
                            </>
              ) : (
                                <FaEyeSlash
                  onClick={ handlepUpdateStatus }
                  className = " text-blue-700 hover:cursor-pointer text-lg"
                                />
              )
                }
              < FaTrash
                onClick = { handlepDelete }
                className = " text-red-700 hover:cursor-pointer text-lg"
            />
            </div>
          );
        },
},
    ];
  }

return (
    <>
    <Box sx= {{ height: 400, width: 1 }}>
        <DataGrid
          rows={ props.data }
disableColumnFilter
disableColumnSelector
disableDensitySelector
columns = { columns }
slots = {{ toolbar: GridToolbar }}
slotProps = {{
    toolbar: {
        showQuickFilter: true,
            quickFilterProps: { debounceMs: 500 },
    },
}}
/>
    < /Box>
    < />
  );
}
